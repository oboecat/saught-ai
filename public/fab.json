{
  "name": "floating-ai-widget",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "input",
    "dropdown-menu"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  },
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "floating-ai-widget.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { X, Send, Minimize2, Quote, ChevronDown } from \"lucide-react\"\n\ninterface FloatingAIWidgetProps {\n  agentPrompt?: string;\n  defaultAI?: string;\n  placeholder?: string;\n  aiServices?: { id: string; name: string; url: string }[];\n  textSelectionPrefix?: string;\n}\n\nconst defaultAiServices = [\n  { id: \"chatgpt\", name: \"ChatGPT\", url: \"https://chatgpt.com/?hints=search&q=\" },\n  { id: \"claude\", name: \"Claude\", url: \"https://claude.ai/chat?q=\" },\n  // It would seem Gemini does not support query strings, yet.\n  // { id: \"gemini\", name: \"Gemini\", url: \"https://gemini.google.com/app?q=\" },\n  { id: \"perplexity\", name: \"Perplexity\", url: \"https://www.perplexity.ai/?q=\" },\n  { id: \"copilot\", name: \"Copilot\", url: \"https://copilot.microsoft.com/?q=\" },\n  { id: \"grok\", name: \"Grok\", url: \"https://grok.com/?q=\" },\n]\n\nconst defaultPrompt = `I have used a widget that has linked me to you from \\${webpage_url}, please read this page. \\${text_selection_context} Here is my question: \\${question}`;\nconst defaultTextSelectionPrefix = \"Here is the text I selected: \"\n\nexport function FloatingAIWidget({ \n  agentPrompt = defaultPrompt,\n  placeholder = \"Type your question...\", \n  defaultAI = \"chatgpt\",\n  aiServices = defaultAiServices,\n  textSelectionPrefix = defaultTextSelectionPrefix\n}: FloatingAIWidgetProps) {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const [selectedService, setSelectedService] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('selectedAIService') || defaultAI\n    }\n    return defaultAI\n  })\n  const [question, setQuestion] = useState(\"\");\n  const [selectedText, setSelectedText] = useState(\"\");\n  const [suppressClose, setSuppressClose] = useState(false)\n  const [isPinned, setIsPinned] = useState(false)\n  const [isQuoteMode, setIsQuoteMode] = useState(false)\n  \n  const inputRef = useRef<HTMLInputElement>(null)\n  const widgetRef = useRef<HTMLDivElement>(null)\n\n  const handleQuestionChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n    if (e.target.value.trim()) {\n      setIsPinned(true);\n    }\n  };\n\n  const captureSelection = () => {\n    const selection = window.getSelection();\n    if (!selection) return;\n\n    const text = selection.toString().trim();\n    if (text) {\n      // Check if selection is within the widget itself\n      const anchorNode = selection.anchorNode;\n      const focusNode = selection.focusNode;\n      \n      // Skip if selection is within the widget\n      if (widgetRef.current && \n          (widgetRef.current.contains(anchorNode) || \n           widgetRef.current.contains(focusNode))) {\n        return;\n      }\n      \n      // Limit to 1KB of text\n      const maxLength = 1024;\n      setSelectedText(text.length > maxLength ? text.slice(0, maxLength) + '...' : text);\n      return true; // Return true if we captured text\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    if (isExpanded && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [isExpanded])\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (!widgetRef.current) return\n\n      if (suppressClose || isPinned || isQuoteMode) return;\n      \n      // Simple check - if the click target is not contained in our widget, close it\n      if (!widgetRef.current.contains(event.target as Node)) {\n        setIsExpanded(false)\n      }\n    }\n\n    function handleEscape(event: KeyboardEvent) {\n      if (event.key === \"Escape\" && !isPinned && !isQuoteMode) {\n        setIsExpanded(false)\n      }\n    }\n\n    if (isExpanded) {\n      document.addEventListener(\"mousedown\", handleClickOutside)\n      document.addEventListener(\"keydown\", handleEscape)\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside)\n      document.removeEventListener(\"keydown\", handleEscape)\n    }\n  }, [isExpanded, suppressClose, isPinned, isQuoteMode]);\n\n  // Add effect to save selectedService to localStorage when it changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('selectedAIService', selectedService)\n    }\n  }, [selectedService])\n\n  // Handle text selection when quote mode is active\n  useEffect(() => {\n    if (!isQuoteMode) return;\n\n    const handleSelectionEnd = (event: MouseEvent | TouchEvent) => {\n      // Check if the event target is an interactive element within the widget\n      const target = event.target as HTMLElement;\n      if (widgetRef.current && widgetRef.current.contains(target)) {\n        // If clicking/touching within the widget, don't capture selection\n        return;\n      }\n\n      // Small delay to ensure selection is complete\n      setTimeout(() => {\n        captureSelection();\n      }, 10);\n    };\n\n    // Listen for both mouse and touch events\n    document.addEventListener('mouseup', handleSelectionEnd);\n    document.addEventListener('touchend', handleSelectionEnd);\n    \n    return () => {\n      document.removeEventListener('mouseup', handleSelectionEnd);\n      document.removeEventListener('touchend', handleSelectionEnd);\n    };\n  }, [isQuoteMode]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    if (question.trim()) {\n      const service = aiServices.find((s) => s.id === selectedService)\n      if (service) {\n        // Include selected text as context if available\n        let fullQuery = agentPrompt.replace(/\\${webpage_url}/g, window.location.href)\n          .replace(/\\${question}/g, question.trim())\n\n        if (selectedText) {\n          fullQuery = fullQuery.replace(/\\${text_selection_context}/g, `${textSelectionPrefix} \"${selectedText}\"`);\n        } else {\n          fullQuery = fullQuery.replace(/\\${text_selection_context}/g, \"\");\n        }\n\n        window.open(service.url + encodeURIComponent(fullQuery), \"_blank\")\n        setQuestion(\"\")\n        setSelectedText(\"\")\n        setIsQuoteMode(false)\n        if (!isPinned) {\n          setIsExpanded(false)\n        }\n      }\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && question.trim()) {\n      handleSubmit(e)\n    }\n  }\n\n  function handleSelectionChange(value: string) {\n    setSelectedService(value)\n    setSuppressClose(false);\n  }\n\n  const toggleQuoteMode = () => {\n    if (!isQuoteMode) {\n      // Check if there's already a selection when activating quote mode\n      captureSelection();\n      setIsQuoteMode(true);\n    } else {\n      // Deactivate quote mode\n      setIsQuoteMode(false);\n    }\n  };\n\n  const clearSelection = () => {\n    setSelectedText(\"\");\n    setIsQuoteMode(false);\n  };\n\n  const selectedServiceName = aiServices.find((s) => s.id === selectedService)?.name || \"ChatGPT\"\n\n  return (\n    <div id=\"floating-ai-widget\" ref={widgetRef} className=\"fixed bottom-6 right-6 z-50 transition-all duration-300 ease-in-out\">\n      <div className={`bg-white/20 backdrop-blur-md border border-white/30 rounded-2xl shadow-2xl overflow-hidden transition-transform duration-200 ease-out ${isExpanded ? 'scale-100' : 'scale-95 hover:scale-100'}`}>\n        {!isExpanded ? (\n          // Collapsed State\n          <div className=\"flex items-center gap-2 p-3\">\n            <Button\n              onClick={() => setIsExpanded(true)}\n              variant=\"ghost\"\n              className=\"text-gray-700 hover:text-gray-900 hover:bg-white/20 font-medium\"\n            >\n              Ask {selectedServiceName}\n            </Button>\n\n            <DropdownMenu modal={false} onOpenChange={setSuppressClose}>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"w-auto border-0 bg-transparent hover:bg-white/20 focus:ring-0 focus:ring-offset-0 h-auto p-1\">\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {aiServices.map((service) => (\n                  <DropdownMenuItem \n                    key={service.id} \n                    onClick={() => handleSelectionChange(service.id)}\n                    className=\"cursor-pointer\"\n                  >\n                    {service.name}\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        ) : (\n          // Expanded State\n          <div className=\"p-4 w-80\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Ask</span>\n                <DropdownMenu  modal={false} onOpenChange={setSuppressClose}>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"w-auto border-0 bg-transparent hover:bg-white/20 focus:ring-0 focus:ring-offset-0 text-sm h-auto p-1 px-2\">\n                      {selectedServiceName}\n                      <ChevronDown className=\"h-3 w-3 ml-1\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"start\">\n                    {aiServices.map((service) => (\n                      <DropdownMenuItem \n                        key={service.id} \n                        onClick={() => handleSelectionChange(service.id)}\n                        className=\"cursor-pointer\"\n                      >\n                        {service.name}\n                      </DropdownMenuItem>\n                    ))}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  onClick={toggleQuoteMode}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className={`h-6 w-6 p-0 hover:bg-white/20 ${isQuoteMode ? 'text-blue-600 bg-blue-100/30' : 'text-gray-500'}`}\n                  title=\"Quote selected text\"\n                >\n                  <Quote className=\"h-3 w-3\" />\n                </Button>\n                <Button\n                  onClick={() => {\n                    setIsPinned(false);\n                    setIsExpanded(false);\n                  }}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 w-6 p-0 hover:bg-white/20 text-gray-500\"\n                  title=\"Minimize\"\n                >\n                  <Minimize2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </div>\n\n            <form onSubmit={handleSubmit}>\n              {(selectedText || isQuoteMode) && (\n                <div className=\"mb-3 p-2 bg-white/30 rounded-lg border border-white/30 group\">\n                  <div className=\"flex justify-between items-start mb-1\">\n                    <span className=\"text-xs font-medium text-gray-600\">\n                      {selectedText ? \"Quoted from page\" : \"Select text from page\"}\n                    </span>\n                    {selectedText && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-4 w-4 p-0 hover:bg-white/20 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={clearSelection}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                  </div>\n                  {selectedText ? (\n                    <div className=\"border-l-3 border-gray-500 pl-3\">\n                      <p className=\"text-sm text-gray-700 break-words whitespace-pre-line line-clamp-3\">\n                        {selectedText}\n                      </p>\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-gray-500 italic\">\n                      Highlight any text on the page to quote it\n                    </p>\n                  )}\n                </div>\n              )}\n              <div className=\"flex gap-2\">\n                <Input\n                  ref={inputRef}\n                  value={question}\n                  onChange={handleQuestionChange}\n                  onKeyDown={handleKeyDown}\n                  placeholder={placeholder}\n                  className=\"bg-white/50 border-white/30 focus:bg-white/70 focus:border-white/50 placeholder:text-gray-500 flex-1\"\n                />\n                <Button\n                  type=\"submit\"\n                  size=\"sm\"\n                  disabled={!question.trim()}\n                  className=\"bg-blue-500/80 hover:bg-blue-600/80 text-white border-0 px-3\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </form>\n\n            <div className=\"mt-2 text-xs text-gray-600\">\n              {question.trim() ? \"Click send or press Enter to submit ✓\" : \"Type your question above\"}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}